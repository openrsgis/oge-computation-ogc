package whu.edu.cn.trajectory.db.query.basic.query;

import whu.edu.cn.trajectory.base.trajectory.Trajectory;
import whu.edu.cn.trajectory.db.coprocessor.STCoprocessorQuery;
import whu.edu.cn.trajectory.db.coprocessor.autogenerated.QueryCondition;
import whu.edu.cn.trajectory.db.database.DataSet;
import whu.edu.cn.trajectory.db.database.meta.IndexMeta;
import whu.edu.cn.trajectory.db.database.table.IndexTable;
import whu.edu.cn.trajectory.db.datatypes.TimeLine;
import whu.edu.cn.trajectory.db.enums.IndexType;
import whu.edu.cn.trajectory.db.enums.TemporalQueryType;
import whu.edu.cn.trajectory.db.index.RowKeyRange;
import whu.edu.cn.trajectory.db.query.basic.condition.AbstractQueryCondition;
import whu.edu.cn.trajectory.db.query.basic.condition.IDQueryCondition;
import whu.edu.cn.trajectory.db.query.basic.condition.TemporalQueryCondition;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @author xuqi
 * @date 2023/12/01
 */
public class IDTemporalQuery extends AbstractQuery {

  IDQueryCondition idQueryCondition;

  public IDTemporalQuery(
      DataSet dataSet,
      AbstractQueryCondition abstractQueryCondition,
      IDQueryCondition idQueryCondition) {
    super(dataSet, abstractQueryCondition);
    this.idQueryCondition = idQueryCondition;
  }

  public IDTemporalQuery(
      IndexTable indexTable,
      AbstractQueryCondition abstractQueryCondition,
      IDQueryCondition idQueryCondition)
      throws IOException {
    super(indexTable, abstractQueryCondition);
    this.idQueryCondition = idQueryCondition;
  }

  @Override
  public List<RowKeyRange> getIndexRanges() throws IOException {
    setupTargetIndexTable();
    return targetIndexTable
        .getIndexMeta()
        .getIndexStrategy()
        .getScanRanges(abstractQueryCondition, idQueryCondition.getMoid());
  }

  @Override
  public List<Trajectory> executeQuery() throws IOException {
    List<RowKeyRange> rowKeyRanges = getIndexRanges();
    return executeQuery(rowKeyRanges);
  }

  @Override
  public List<Trajectory> executeQuery(List<RowKeyRange> rowKeyRanges) throws IOException {
    List<QueryCondition.Range> ranges = rowKeyRangeToProtoRange(rowKeyRanges);
    TemporalQueryCondition temporalQueryCondition = (TemporalQueryCondition) abstractQueryCondition;
    List<QueryCondition.TemporalQueryWindow> temporalQueryWindows =
        buildProtoTemporalWindows(temporalQueryCondition);

    QueryCondition.QueryRequest timeQueryRequest =
        QueryCondition.QueryRequest.newBuilder()
            .setTemporalQueryType(
                temporalQueryCondition.getTemporalQueryType() == TemporalQueryType.CONTAIN
                    ? QueryCondition.QueryType.CONTAIN
                    : QueryCondition.QueryType.INTERSECT)
            .setTemporalQueryWindows(
                QueryCondition.TemporalQueryWindows.newBuilder()
                    .addAllTemporalQueryWindow(temporalQueryWindows)
                    .build())
            .setOid(idQueryCondition.getMoid())
            .addAllRange(ranges)
            .build();

    return STCoprocessorQuery.executeQuery(targetIndexTable, timeQueryRequest);
  }

  @Override
  public IndexMeta findBestIndex() {
    Map<IndexType, List<IndexMeta>> map = dataSet.getDataSetMeta().getAvailableIndexes();
    // find a spatial index
    List<IndexMeta> spatialIndexList = null;
    if (map.containsKey(IndexType.OBJECT_ID_T)) {
      spatialIndexList = map.get(IndexType.OBJECT_ID_T);
    }
    if (spatialIndexList != null) {
      return IndexMeta.getBestIndexMeta(spatialIndexList);
    }
    // no spatial index so we will do a full table scan, we select a main index.
    return dataSet.getDataSetMeta().getCoreIndexMeta();
  }

  @Override
  public String getQueryInfo() {
    return abstractQueryCondition.getConditionInfo() + ", " + idQueryCondition.getConditionInfo();
  }

  public static List<QueryCondition.TemporalQueryWindow> buildProtoTemporalWindows(
      TemporalQueryCondition temporalQueryCondition) {
    List<QueryCondition.TemporalQueryWindow> temporalQueryWindows = new ArrayList<>();
    for (TimeLine queryWindow : temporalQueryCondition.getQueryWindows()) {
      QueryCondition.TemporalQueryWindow temporalQueryWindow =
          QueryCondition.TemporalQueryWindow.newBuilder()
              .setStartMs(queryWindow.getTimeStart().toEpochSecond())
              .setEndMs(queryWindow.getTimeEnd().toEpochSecond())
              .build();
      temporalQueryWindows.add(temporalQueryWindow);
    }
    return temporalQueryWindows;
  }
}
