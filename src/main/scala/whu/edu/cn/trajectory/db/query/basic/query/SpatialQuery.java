package whu.edu.cn.trajectory.db.query.basic.query;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import whu.edu.cn.trajectory.base.trajectory.Trajectory;
import whu.edu.cn.trajectory.db.coprocessor.STCoprocessorQuery;
import whu.edu.cn.trajectory.db.coprocessor.autogenerated.QueryCondition;
import whu.edu.cn.trajectory.db.database.DataSet;
import whu.edu.cn.trajectory.db.database.meta.IndexMeta;
import whu.edu.cn.trajectory.db.database.table.IndexTable;
import whu.edu.cn.trajectory.db.enums.IndexType;
import whu.edu.cn.trajectory.db.index.RowKeyRange;
import whu.edu.cn.trajectory.db.query.basic.condition.AbstractQueryCondition;
import whu.edu.cn.trajectory.db.query.basic.condition.SpatialQueryCondition;

import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * @author xuqi
 * @date 2023/12/01
 */
public class SpatialQuery extends AbstractQuery {

  private static final Logger logger = LoggerFactory.getLogger(SpatialQuery.class);

  public SpatialQuery(DataSet dataSet, AbstractQueryCondition abstractQueryCondition)
      throws IOException {
    super(dataSet, abstractQueryCondition);
  }

  public SpatialQuery(IndexTable targetIndexTable, AbstractQueryCondition abstractQueryCondition)
      throws IOException {
    super(targetIndexTable, abstractQueryCondition);
  }

  @Override
  public List<RowKeyRange> getIndexRanges() throws IOException {
    setupTargetIndexTable();
    return targetIndexTable.getIndexMeta().getIndexStrategy().getScanRanges(abstractQueryCondition);
  }

  @Override
  public List<Trajectory> executeQuery() throws IOException {
    List<RowKeyRange> rowKeyRanges = getIndexRanges();
    return executeQuery(rowKeyRanges);
  }

  @Override
  public List<Trajectory> executeQuery(List<RowKeyRange> rowKeyRanges) throws IOException {
    setupTargetIndexTable();
    List<QueryCondition.Range> ranges = rowKeyRangeToProtoRange(rowKeyRanges);
    SpatialQueryCondition spatialQueryCondition = (SpatialQueryCondition) abstractQueryCondition;
    QueryCondition.QueryRequest spatialQueryRequest =
        QueryCondition.QueryRequest.newBuilder()
            .setSpatialQueryType(
                spatialQueryCondition.getQueryType()
                        == SpatialQueryCondition.SpatialQueryType.CONTAIN
                    ? QueryCondition.QueryType.CONTAIN
                    : QueryCondition.QueryType.INTERSECT)
            .setSpatialQueryWindow(
                QueryCondition.SpatialQueryWindow.newBuilder()
                    .setWkt(spatialQueryCondition.getQueryWindowWKT()))
            .addAllRange(ranges)
            .build();
    return STCoprocessorQuery.executeQuery(targetIndexTable, spatialQueryRequest);
  }

  public QueryCondition.QueryRequest getQuery(List<RowKeyRange> rowKeyRanges) throws IOException {
    setupTargetIndexTable();
    List<QueryCondition.Range> ranges = rowKeyRangeToProtoRange(rowKeyRanges);
    SpatialQueryCondition spatialQueryCondition = (SpatialQueryCondition) abstractQueryCondition;
    QueryCondition.QueryRequest spatialQueryRequest =
        QueryCondition.QueryRequest.newBuilder()
            .setSpatialQueryType(
                spatialQueryCondition.getQueryType()
                        == SpatialQueryCondition.SpatialQueryType.CONTAIN
                    ? QueryCondition.QueryType.CONTAIN
                    : QueryCondition.QueryType.INTERSECT)
            .setSpatialQueryWindow(
                QueryCondition.SpatialQueryWindow.newBuilder()
                    .setWkt(spatialQueryCondition.getQueryWindowWKT()))
            .addAllRange(ranges)
            .build();
    return spatialQueryRequest;
  }

  public List<Trajectory> executeQueryScan(
      IndexTable targetIndexTable, QueryCondition.QueryRequest spatialQueryRequest, int time)
      throws IOException {
    List<Trajectory> trajectories = null;
    for (int i = 0; i < time; i++) {
      trajectories = STCoprocessorQuery.executeQuery(targetIndexTable, spatialQueryRequest);
    }
    return trajectories;
  }

  @Override
  public IndexMeta findBestIndex() {
    Map<IndexType, List<IndexMeta>> map = dataSet.getDataSetMeta().getAvailableIndexes();
    // find a spatial index
    List<IndexMeta> spatialIndexList = null;
    if (map.containsKey(IndexType.XZ2)) {
      spatialIndexList = map.get(IndexType.XZ2);
    } else if (map.containsKey(IndexType.XZ2T)) {
      spatialIndexList = map.get(IndexType.XZ2);
    } else if (map.containsKey(IndexType.XZ2Plus)) {
      spatialIndexList = map.get(IndexType.XZ2Plus);
    }
    if (spatialIndexList != null) {
      return IndexMeta.getBestIndexMeta(spatialIndexList);
    }
    // no spatial index so we will do a full table scan, we select a main index.
    return dataSet.getDataSetMeta().getCoreIndexMeta();
  }

  @Override
  public String getQueryInfo() {
    return abstractQueryCondition.getConditionInfo();
  }
}
