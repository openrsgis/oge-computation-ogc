package whu.edu.cn.trajectory.db.coprocessor;

import org.apache.hadoop.hbase.client.coprocessor.Batch;
import org.apache.hadoop.hbase.ipc.BlockingRpcCallback;
import org.apache.hadoop.hbase.ipc.ServerRpcController;
import whu.edu.cn.trajectory.base.trajectory.Trajectory;
import whu.edu.cn.trajectory.db.database.table.IndexTable;
import whu.edu.cn.trajectory.db.database.util.TrajectorySerdeUtils;
import whu.edu.cn.trajectory.db.coprocessor.autogenerated.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @author xuqi
 * @date 2023/12/03
 */
public class STCoprocessorQuery {

    public static List<Trajectory> executeQuery(IndexTable indexTable, QueryCondition.QueryRequest request) throws IOException {
        List<QueryCondition.Range> ranges = request.getRangeList();

        Map<byte[], List<QueryCondition.TrajectoryResult>> coprocessorResult = null;
        try {
            coprocessorResult = indexTable.getTable().coprocessorService(QueryCondition.QueryService.class,
                    ranges.get(0).getStart().toByteArray(), ranges.get(ranges.size() - 1).getEnd().toByteArray(),
                    new Batch.Call<QueryCondition.QueryService, List<QueryCondition.TrajectoryResult>>() {
                        @Override
                        public List<QueryCondition.TrajectoryResult> call(QueryCondition.QueryService queryService) throws IOException {
                            BlockingRpcCallback<QueryCondition.QueryResponse> rpcCallback = new BlockingRpcCallback();
                            queryService.query(new ServerRpcController(), request, rpcCallback);
                            QueryCondition.QueryResponse response = rpcCallback.get();
                            return response.getListList();
                        }
                    });
        } catch (Throwable e) {
            e.printStackTrace();
        }

        List<Trajectory> result = new ArrayList<>();
        for (List<QueryCondition.TrajectoryResult> trajectoryResultList : coprocessorResult.values()) {
            for (QueryCondition.TrajectoryResult tr : trajectoryResultList) {
                Trajectory trajectory = TrajectorySerdeUtils.protoResultToTrajectory(tr);
                result.add(trajectory);
            }
        }
        return result;
    }

}
